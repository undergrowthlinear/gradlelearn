task hello << {
	println "key-value task def"
}

task(hello2) << {
	println "method task def"
}

task('hello3') << {
	println "method string task def"
}

tasks.create(name:'copy',type:Copy){
	println buildDir
	from(file('srcDir'))
	into(buildDir)
	include('**/*.txt', '**/*.xml', '**/*.properties')
	println tasks['hello'].name
}

/**
project('projectA') {
	task taskX(dependsOn: ':projectB:taskY') << {
	println 'taskX'
	}
}
project('projectB') {
	task taskY << {
	println 'taskY'
	}
}
**/
task taskX << {
	description 'test dependsOn'
	println 'taskX'
}
taskX.dependsOn {
	tasks.findAll { task -> task.name.startsWith('lib') }
}
task lib1 << {
	println 'lib1'
}
task lib2 << {
	println 'lib2'
}
task notALib << {
	println 'notALib'
}

/**
onlyIf--为true执行,所依赖的任务不受影响
**/
taskX.onlyIf{
	!project.hasProperty('skipHello')
}

/**
停止某个任务执行--throw new StopExecutionException()
**/
hello.doFirst{
	if(true) {
		throw new StopExecutionException()
	}
}

task helloStop(dependsOn:hello) << {
	println 'stop will not affect me'
}

/**
激活和注销自己--enabled
**/
task disableMe << {
	println 'i will not disaply'
}

disableMe.enabled=false

/**
任务的输入、输出,判断任务是否是最新的,取决于输入、输出的散列值
**/
task transform {
	ext.srcFile = file('mountains.xml')
	ext.destDir = new File(buildDir, 'generated')
	inputs.file srcFile
	outputs.dir destDir
	doLast {
		println "Transforming source file."
		destDir.mkdirs()
		def mountains = new XmlParser().parse(srcFile)
		mountains.mountain.each { mountain ->
		def name = mountain.name[0].text()
		def height = mountain.height[0].text()
		def destFile = new File(destDir, "${name}.txt")
		destFile.text = "$name -> ${height}\n"
								}
		}
}

tasks.addRule("Pattern: ping<ID>") { String taskName ->
	if (taskName.startsWith("ping")) {
	task(taskName) << {
	println "Pinging: " + (taskName - 'ping')
	}
	}
}

/**
终止任务,即最后调用的任务
**/
hello.finalizedBy hello2
